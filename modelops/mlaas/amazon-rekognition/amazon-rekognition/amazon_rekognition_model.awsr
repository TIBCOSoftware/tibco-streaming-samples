# Copyright (c) 2022-2023 Cloud Software Group, Inc.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# import common packages needed for data manipulation
import pandas as pd
import numpy as np
from typing import Iterable
from typing import Tuple
from datetime import datetime

# import amazon packages for authentication and text analytics
# packages are listed in the requirements.txt model property file
import boto3

# set columns for id and image columns
idColumnName = 'Name'
imgColumnName = 'Image'

# AWS authentication information needed to create service
aws_access_keyIn="ENTER_YOUR_AWS_ACCESS_KEY_HERE"  
aws_secret_keyIn="ENTER_YOUR_AWS_SECRET_KEY_HERE"
aws_rolearn="ENTER_YOUR_ROLE_ARN_HERE"
aws_region="ENTER_YOUR_REGION_HERE"

assumed_role = None
aws_service = None

def getAWSRole(key_id, secret_key, roleArn, sessionName):
    ## assume role using script
    sts_client = boto3.client('sts', aws_access_key_id=key_id, aws_secret_access_key=secret_key)
    ## call assume role - "aws-comprehend-example"
    return sts_client.assume_role(RoleArn=roleArn, RoleSessionName=sessionName)

## If new service is needed, then return session to get new service
## otherwise return None so existing service is used 

def getAWSSession(key_id, secret_key, roleArn, sessionName):
    global assumed_role
    global aws_service
    # check to see if have retrieved credentials
    if (assumed_role is None):
        assumed_role = getAWSRole(key_id, secret_key, roleArn, sessionName)
    # need to check token expiration
    tokenexp = assumed_role["Credentials"]["Expiration"]
    if (tokenexp <= datetime.now(tokenexp.tzinfo)):
        # need to refresh token
        assumed_role = getAWSRole(key_id, secret_key, roleArn, sessionName)
        # reset aws_service
        aws_service = None
    # if comprehend has not been defined yet then create
    if (aws_service is None):
        # get values for creating session    
        aws_access_key=assumed_role["Credentials"]["AccessKeyId"]
        aws_secret_key=assumed_role["Credentials"]["SecretAccessKey"]
        aws_session_tkn=assumed_role["Credentials"]["SessionToken"]
        # create session
        aws_session = boto3.session.Session(region_name=aws_region, aws_access_key_id=aws_access_key, 
              aws_secret_access_key=aws_secret_key, aws_session_token=aws_session_tkn)
        return aws_session
    return None

def getAWSService(svcname, key_id, secret_key, roleArn):
    global aws_service
    ## get session
    aws_session = getAWSSession(key_id, secret_key, roleArn, "aws-" + svcname + "-session")
    # if session is not none then need to create new service
    if (aws_service is None):
        # create rekognition
        aws_service = aws_session.client(service_name=svcname) #, region_name=aws_region)
    # return value    
    return aws_service

#-----------------------------------------------------------------------------
def score(data: np.ndarray, column_names: Iterable[str]) -> Tuple[np.ndarray, Iterable[str]]:
    #
    # scoring logic goes in this function
    #
    ## get rekognition service 
    rekognitionLocal = getAWSService('rekognition', aws_access_keyIn, aws_secret_keyIn, aws_rolearn)
    ## Empty results list
    results_list = []
    # Convert from array to dataframe
    input_data = pd.DataFrame(data, columns=column_names)    
    ## Empty df to pass back if no results
    rekog_results = pd.DataFrame(columns=(idColumnName,'LabelScores'))
    ## Loop text in table - note AWS has a batch mode that may be more efficient to use
    for index, row in input_data.iterrows():
        if not pd.isna(row[idColumnName]):
            # get labels from AWS
            rcgResponse = rekognitionLocal.detect_labels(Image={'Bytes':row[imgColumnName]})
            #
            img_results = {'Name' : row[idColumnName]}
            # get image tag confidence and name
            dfImageScore = []
            for imgLbl in rcgResponse['Labels']:
                dfImageScore.append({'Label':imgLbl['Name'], 'Confidence':imgLbl['Confidence']})
            img_results.update({"LabelScores" : dfImageScore})
            results_list.append(img_results)

    if len(results_list) > 0:
        rekog_results = pd.DataFrame.from_dict(results_list, orient='columns')
    #
    score_data = rekog_results.to_numpy()
    # return data
    return score_data, None # score_columns
