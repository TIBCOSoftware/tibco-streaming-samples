#  Copyright (c) 2018-2023 Cloud Software Group, Inc.
#  
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#  
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.

#
# ConfigMap for configuration
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: configuration
data:
---

#
# ConfigMap for resources
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: resources
data:
---
# CusterRole Binding
#
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: ef-kubernetes-app-rolebinding
  labels:
    app.kubernetes.io/part-of: ef-kubernetes-app
    app.kubernetes.io/name: ef-kubernetes-app-rolebinding  
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: default
  namespace: default
---
#
# application cluster as a stateful set
#
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: ef-kubernetes-app
spec:
  selector:
    matchLabels:
      app: ef-kubernetes-app
  serviceName: ef-kubernetes-app
  #
  # initially 3 eventflow nodes in the cluster
  # can be scaled up or down
  #
  replicas: 3
  #
  # start all pods at the same time
  #
  podManagementPolicy: Parallel
  #
  # Enable rolling updates
  #
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: ef-kubernetes-app
    spec:
      volumes:
        - name: configuration
          configMap:
            name: configuration
        - name: resources
          configMap:
            name: resources
      containers:
        - name: ef-kubernetes-app
          #
          # docker image to use
          #
          image: ef-kubernetes-app:1.0.0
          #
          # mount the configuration and resources volumes
          #
          volumeMounts:
          - name: configuration
            mountPath: /var/opt/tibco/streambase/configuration
          - name: resources
            mountPath: /var/opt/tibco/streambase/resources
          #
          # Share application logs to docker console
          #
          tty: true
          #
          # set Streaming node name
          #
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name            
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: APPNAME
            value: ef-kubernetes-app
          - name: STREAMING_NODENAME
            value: "$(POD_NAME).$(POD_NAMESPACE).$(APPNAME)"
          #
          # use healthcheck API for an initial wait until the application is ready
          #
          readinessProbe:
            httpGet:
              path: /healthcheck/v1/status
              port: 8008
            initialDelaySeconds: 60
            periodSeconds: 10
          #
          # use healthcheck API for on-going health
          #
          livenessProbe:
            httpGet:
              path: /healthcheck/v1/status
              port: 8008
            initialDelaySeconds: 240
            periodSeconds: 10
