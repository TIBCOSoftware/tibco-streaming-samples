#  Copyright (C) 2018-2019, TIBCO Software Inc.
#  
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are met:
#  
#  1. Redistributions of source code must retain the above copyright notice,
#     this list of conditions and the following disclaimer.
#  
#  2. Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions and the following disclaimer in the documentation
#     and/or other materials provided with the distribution.
#  
#  3. Neither the name of the copyright holder nor the names of its contributors
#     may be used to endorse or promote products derived from this software
#     without specific prior written permission.
#  
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
#  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
#  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
#  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
#  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
#  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
#  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
#  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
#  POSSIBILITY OF SUCH DAMAGE.


---
- name: Play 1 -- Create StreamBase base and application docker image based on Almalinux
  hosts: localhost
  vars_files:
    - "{{ project_basedir }}/target/classes/global_vars/docker_hub.yml"

  tasks:
  - name: Create work directory for base image
    file:
      path: "{{ project_build_directory }}/docker/base/maven"
      state: directory

  - name: Copy platform.zip file into work directory
    copy:
      src:  "{{ project_basedir }}/target/dependencies/{{ platform }}.zip"
      dest: "{{ project_build_directory }}/docker/base/maven/"

  - name: Copy start-node script to base image work directory
    copy:
      src:  "{{ project_basedir }}/src/main/docker/base/start-node"
      dest: "{{ project_build_directory }}/docker/base/maven/"

  - name: Update dockerfile before building base image
    replace:
      path: "{{ project_build_directory }}/docker/base/Dockerfile"
      regexp: "{{ item.search }}"
      replace: "{{ item.replace }}"
    with_items:
      - { search: '(^LABEL build-image=)(.*)$', replace: "LABEL build-image={{ projectId_ver }}" }
      - { search: '(^###Note:\s)(.*)$', replace: '###Note: LABEL statement build by Ansible playbook' }   

  - name: Remove docker image if exists from previous build
    docker_image:
      state: absent
      name: sbrt-base
      tag: "{{ sbrt_ver }}"

  - name: Building SB base image - sbrt-base
    docker_image:
      build:
        path: "{{ project_build_directory }}/docker/base/"
        pull: no
      push: no
      name: sbrt-base
      repository: sbrt-base
      tag: "{{ sbrt_ver }}"
      source: build

  - name: Clean up work directory for base image
    file:
      path: "{{ project_build_directory }}/docker/base/maven"
      state: absent

  - name: Remove intermediate image with LABEL build-image={{ projectId_ver }}
    shell: docker image prune --filter label=build-image={{ projectId_ver }} -f

  - name: Create source directory for app image
    file:
      path: "{{ project_build_directory }}/docker/application/maven/"
      state: directory

  - name: Create a copy of platform zip file into application docker image work directory
    copy:
      src:  "{{ project_basedir }}/target/{{ projectId }}-{{ projectId_ver }}-ep-application.zip"
      dest: "{{ project_build_directory }}/docker/application/maven/{{ projectId }}-{{ projectId_ver }}.zip"

  - name: Update dockerfile before building app image
    replace:
      path: "{{ project_build_directory }}/docker/application/Dockerfile"
      regexp: "{{ item.search }}"
      replace: "{{ item.replace }}"
    with_items:
      - { search: '(^FROM\s)(.*)$', replace: "FROM sbrt-base:{{ sbrt_ver }}" }
      - { search: '(^###Note:\s)(.*)$', replace: '###Note: FROM statement build by Ansible playbook' }
      - { search: '(^LABEL build-image=)(.*)$', replace: "LABEL build-image={{ projectId_ver }}" }
      - { search: '(^###Note:\s)(.*)$', replace: '###Note: LABEL statement build by Ansible playbook' }   
    
  - name: Remove docker image if exists from previous build
    docker_image:
      state: absent
      name: "docker/{{ projectId }}"
      tag: "{{ projectId_ver }}"

  - name: Building StreamBase application image
    docker_image:
      build:
        path: "{{ project_build_directory }}/docker/application/"
        pull: no
      name: "docker/{{ projectId }}"
      repository: "docker/{{ projectId }}"
      tag: "{{ projectId_ver }}"
      source: build

  - name: Clean up work directory for application image
    file:
      path: "{{ project_build_directory }}/docker/application/maven/"
      state: absent
      
  - name: Update bash file before copying to EC2 instance (files in additional-scripts folder)
    replace:
      path: "{{ project_basedir }}/target/classes/1-start_cluster.sh"
      regexp: "{{ item.search }}"
      replace: "{{ item.replace }}"
    with_items:
      - { search: '\bdocker\/\b', replace: "{{ dockerhub_username }}/" }

#### Test tasks - skipTests set to true

  - name: Create example.com network
    docker_network:
      name: example.com
      state: present
    when: skipTests == 'false'
      
  - name: Start container A.{{ projectId }}
    docker_container:
      name: A.{{ projectId }}
      image: docker/{{ projectId }}:{{ projectId_ver }}
      hostname: A.example.com
      networks: 
        - name: example.com
          aliases: 
            - A.example.com
      env:
        NODENAME: A.{{ projectId }}
      state: started
    when: skipTests == 'false'

  - name: Waiting for Node A to start
    shell: until docker logs A.{{ projectId }} | grep -q "COMMAND FINISHED"; do sleep 1; done
    when: skipTests == 'false'

  - name: Start container B.{{ projectId }}
    docker_container:
      name: B.{{ projectId }}
      image: docker/{{ projectId }}:{{ projectId_ver }}
      hostname: B.example.com
      networks:
        - name: example.com
          aliases:
            - B.example.com
      env:
        NODENAME: B.{{ projectId }}
      state: started
    when: skipTests == 'false'

  - name: Waiting for Node B to start
    shell: until docker logs B.{{ projectId }} | grep -q "COMMAND FINISHED"; do sleep 1; done
    when: skipTests == 'false'

  - name: Run epadmin command on Node A
    shell: docker exec A.{{ projectId }} epadmin --servicename={{ projectId }} display cluster
    register: NodeAresults
    when: skipTests == 'false'
  - name: Node A
    debug: var=NodeAresults.stdout_lines
    when: skipTests == 'false'

  - name: Run epadmin command on Node B
    shell: docker exec B.{{ projectId }} epadmin --servicename={{ projectId }} display cluster
    register: NodeBresults
    when: skipTests == 'false'
  - name:  Node B
    debug: var=NodeBresults.stdout_lines
    when: skipTests == 'false'

### Stop and remove conatiners tasks

  - name: Stop and remove container A
    docker_container:
      name: A.{{ projectId }}
      state: absent
    when: skipTests == 'false'

  - name: Stop and remove container B
    docker_container:
      name: B.{{ projectId }}
      state: absent
    when: skipTests == 'false'

  - name: Remove example.com network
    docker_network:
      name: example.com
      state: absent
    when: skipTests == 'false'

### Tag and push application image to DockerHub

  - name: Login to DockerHub remote private registry
    docker_login:
      username: "{{ dockerhub_username }}"
      password: "{{ dockerhub_password }}"
      email: "{{ email_address }}"

  - name: Tag docker image and push to DockerHub
    docker_image:
      name: docker/{{ projectId }}:{{ projectId_ver }}
      repository: "{{ dockerhub_username }}/{{ projectId }}:{{ projectId_ver }}"
      build:
        pull: no
      source: local
      push: yes
      state: present
    register: push

  - name: Logout from DockerHub
    docker_login:
      state: absent

  - name: Untagged successfully pushed image
    shell: docker rmi {{ dockerhub_username }}/{{ projectId }}:{{ projectId_ver }}
    when: push.changed

### Removing docker images build in this playbook

  - name: Platform check
    shell: uname
    ignore_errors: yes
    register: platform_results

  - name: Remove Docker images [Linux]
    shell: docker images --filter label=build-image={{ projectId_ver }} | awk '{print $3}' | tail -n +2 | xargs -r --no-run-if-empty docker rmi 
    when: platform_results.stdout == 'Linux' and skipTests == 'false'

  - name: Remove Docker images 
    shell: docker images --filter label=build-image={{ projectId_ver }} | awk '{print $3}' | tail -n +2 | xargs docker rmi 
    when: platform_results.stdout != 'Linux' and  skipTests == 'false'


- name: Play 2 -- Create security group and ec2 instance(s)
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
     - "{{ project_basedir }}/target/classes/global_vars/aws_config.yml"

  tasks:
  - name: Assume an existing role
    sts_assume_role:
      role_arn: "{{ role_arn }}"
      role_session_name: "{{ role_session_name }}"
      region: "{{ region }}"
    register: assumed_role
    when: sts

  - name: Create a security group for SSH access
    ec2_group:
      aws_access_key: "{{ assumed_role.sts_creds.access_key | default(omit) }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key | default(omit) }}"
      security_token: "{{ assumed_role.sts_creds.session_token | default(omit) }}"

      name: "{{ sg_name }}"
      description: "{{ sg_description }}"
      region: "{{ region }}"

      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: "{{ cidr_ip }}"
          rule_desc: "{{ rule_desc }}"

  - name: Create EC2 instance -- Almalinux -- {{ instance_type }}
    ec2:
      aws_access_key: "{{ assumed_role.sts_creds.access_key | default(omit) }}"
      aws_secret_key: "{{ assumed_role.sts_creds.secret_key  | default(omit) }}"
      security_token: "{{ assumed_role.sts_creds.session_token  | default(omit) }}"

      group: "{{ sg_name }}"
      instance_type: "{{ instance_type }}"
      image: "{{ image_id }}"
      wait: true
      region: "{{ region }}"
      keypair: "{{ keypair }}"
      count: "{{ count }}"
      instance_tags:
         Name: "ef-2node-awsec2-app"
         Type: "Docker_host"
    register: ec2

  - name: Update inventory list
    add_host:
      name: "{{ item.public_ip }}"
      groups: "AnsibleVms"
    with_items:
      - "{{ ec2.instances }}"

  - name: Wait for SSH to be available
    wait_for:
      host: "{{ item.public_ip }}"
      port: 22
      state: started
      delay: 60
      timeout: 300
    with_items:
      - "{{ ec2.instances }}"


- name: Play 3 -- Install Docker on ec2 instance(s) and pull docker image
  hosts: AnsibleVms
  gather_facts: false
  remote_user: almalinux
  become: yes
  vars_files:
     - "{{ project_basedir }}/target/classes/global_vars/docker_hub.yml"

  tasks:
  - name: Install Docker CE on Almalinux -- getting docker-ce repo
    get_url:
      url: https://download.docker.com/linux/almalinux/docker-ce.repo
      dest: /etc/yum.repos.d/docker-ce.repo

  - name: Install Docker CE on Almalinux -- install docker-ce
    package:
      name: docker-ce
      state: latest

  - name: Install Docker CE on Almalinux -- install epel-release
    package: 
      name: epel-release
      state: latest

  - name: Install Docker CE on Almalinux -- install python-pip
    package:
      name: python-pip
      state: latest

  - name: Install Docker CE on Almalinux -- install python-py
    shell: pip install docker

  - name: Install Docker CE on Almalinux -- add user almalinux to docker group
    user:
      name: almalinux
      groups: docker
      append: yes

  - name: Install Docker CE on Almalinux -- start and enable docker service
    service:
      name: docker
      state: started
      enabled: yes

  - name: Login to DockerHub remote private registry
    shell: docker login --username {{ dockerhub_username }} --password {{ dockerhub_password }}

  - name: Pull image from DockerHub
    docker_image:
       name: "{{ dockerhub_username }}/{{ projectId }}:{{ projectId_ver }}"
       source: pull

  - name: Logout from DockerHub
    docker_login:
      state: absent

  - name: Copy files to EC2 instance(s) (files in additional-scripts folder)
    copy:
      src: "{{ project_basedir }}/target/classes/{{ item }}"
      dest: "/home/almalinux/additional-scripts/"
      owner: almalinux
      group: almalinux
      mode: 0744
    with_items:
      [ 1-start_cluster.sh, 2-validate_cluster.sh, 3-stop_cluster.sh ]


- name: Play 4 -- Start, validate and stop cluster
  hosts: AnsibleVms
  gather_facts: false
  remote_user: almalinux
  become: yes
  vars_files:
     - "{{ project_basedir }}/target/classes/global_vars/docker_hub.yml"

  tasks:
  - name: Create example.com network
    docker_network:
      name: example.com
      state: present

  - name: Start container A.{{ projectId }}
    docker_container:
      name: A.{{ projectId }}
      image: "{{ dockerhub_username }}/{{ projectId }}:{{ projectId_ver }}"
      hostname: A.example.com
      networks: 
        - name: example.com
          aliases: 
            - A.example.com
      env:
        NODENAME: A.{{ projectId }}
      state: started

  - name: Waiting for Node A to start
    shell: until docker logs A.{{ projectId }} | grep -q "COMMAND FINISHED"; do sleep 1; done

  - name: Start container B.{{ projectId }}
    docker_container:
      name: B.{{ projectId }}
      image: "{{ dockerhub_username }}/{{ projectId }}:{{ projectId_ver }}"
      hostname: B.example.com
      networks:
        - name: example.com
          aliases:
            - B.example.com
      env:
        NODENAME: B.{{ projectId }}
      state: started

  - name: Waiting for Node B to start
    shell: until docker logs B.{{ projectId }} | grep -q "COMMAND FINISHED"; do sleep 1; done

  - name: Run epadmin command on Node A
    shell: docker exec A.{{ projectId }} epadmin --servicename={{ projectId }} display cluster
    register: NodeAresults
  - name: Node A
    debug: var=NodeAresults.stdout_lines

  - name: Run epadmin command on Node B
    shell: docker exec B.{{ projectId }} epadmin --servicename={{ projectId }} display cluster
    register: NodeBresults
  - name:  Node B
    debug: var=NodeBresults.stdout_lines

### Stop and remove comatiners tasks

  - name: Stop and remove container A
    docker_container:
      name: A.{{ projectId }}
      state: absent

  - name: Stop and remove container B
    docker_container:
      name: B.{{ projectId }}
      state: absent

  - name: Remove example.com network
    docker_network:
      name: example.com
      state: absent
